<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>🎯 Giới Thiệu
POLY CAFE là phần mềm quản lý quán cà phê, giúp quản lý nhân viên, sản phẩm, bán hàng,
thống kê hiệu quả và tối ưu quy trình vận hành.

📌 Giao Diện Chính
Khi mở phần mềm, bạn sẽ thấy màn hình chính có các mục chức năng ở thanh menu phía trên, gồm:

1. 🏠 Trang Chủ
Quay về màn hình chính với logo thương hiệu "FOLY CAFE".
Dùng để giới thiệu thương hiệu hoặc hình ảnh tổng quan.

2. 🧑‍🤝‍🧑 Nhân Viên
Thêm/sửa/xóa thông tin nhân viên.
Phân quyền, theo dõi lịch làm việc, trạng thái hoạt động.

3. 🧃 Sản Phẩm
Quản lý danh sách sản phẩm: cà phê, đồ uống, bánh ngọt,...
Chỉnh sửa giá, tên sản phẩm, danh mục.

4. 🚛 Thẻ Lưu Động
Dành cho các đơn hàng mang đi hoặc dịch vụ lưu động.
Quản lý các đơn hàng ngoại vi, giao hàng.

5. ⚙️ Hệ Thống
Thiết lập cài đặt chung cho phần mềm.
Tài khoản, giao diện, sao lưu dữ liệu, v.v.

6. 🚪 Đăng Xuất
Thoát khỏi tài khoản hiện tại để đảm bảo an toàn.

7. 🧾 Phiếu Bán Hàng
Tạo hóa đơn bán hàng cho khách.
Tùy chỉnh số lượng, đơn giá, in phiếu thanh toán.

8. 📊 Thống Kê
Xem doanh thu theo ngày/tháng/năm.
Thống kê bán chạy, lượng hàng tồn, năng suất nhân viên,...

</value>
  </data>
  <data name="label2.Text" xml:space="preserve">
    <value>✅ Các Tính Năng Nổi Bật
Giao diện thân thiện, dễ sử dụng cho cả nhân viên mới.

Quản lý toàn diện từ sản phẩm, nhân sự, hóa đơn đến thống kê.

Tích hợp in phiếu và báo cáo chi tiết phục vụ quản lý.

📌 Hướng Dẫn Sử Dụng Cơ Bản
Đăng nhập bằng tài khoản quản lý/nhân viên.

Kiểm tra sản phẩm: Vào mục "Sản Phẩm" để kiểm tra danh mục có sẵn.

Bắt đầu bán hàng: Chọn "Phiếu Bán Hàng", chọn sản phẩm, nhập số lượng, in hóa đơn.

Theo dõi nhân viên: Quản lý thời gian làm việc trong mục "Nhân Viên".

Xem báo cáo: Truy cập "Thống Kê" để đánh giá hiệu quả kinh doanh.
</value>
  </data>
</root>